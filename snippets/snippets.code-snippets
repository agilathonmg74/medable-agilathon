{
	"set schedule time": {
		"prefix": "md moment schedule",
		"body": [
		  "const startTime = moment()",
		  "  .tz(${1:'Europa/Zagreb'})",
		  "  .add(${2:0}, 'days')",
		  "  .startOf('day')",
		  "  .add(${3:0}, 'hours')",
		  "  .add(${4:30}, 'minutes')",
		  "// .startOf('day')",
		  "$0"		
		],
		"description": "set schedule time"
	  },
	"moment current date": {
		"prefix": "md moment now",
		"body": [
			"const moment = require('moment.timezone')",
			"const now = moment.tz('Europe/Zagreb')",
			"$0"
		],
		"description": "moment current date"
	},
	"job decorator example": {
		"prefix": "md job",
		"body": [
			"import logger from 'logger'",
			"const { log, job } = require('decorators')",
			"",
			"class ${1:ClassName} {",
			"",
			"  @log({ traceError: true })",
			"  @job('* * * * *', { name: '${2:job_name}', active: true })",
			"  static '${2:job_name}'() {",
			"",
			"    logger.debug('some message to log' + new Date().toISOString())",
			"",
			"  }",
			"",
			"}"
		],
		"description": "job decorator example"
	},
	"decorators import": {
		"prefix": "md decorators",
		"body": [
			"const { log, job, on, as, trigger } = require('decorators')",
			""
		],
		"description": "decorators import"
	},
	"medable script header comment": {
		"prefix": "md comment header",
		"body": [
			"/***********************************************************",
			"",
			"@script     ${1:script_name.js}",
			"",
			"@brief      ${2:brief_description}",
			"",
			"@desc       ${3:description}",
			"",
			"@author     ${4:author_name}",
			"",
			"@jira       ${5:jira_ticket}",
			"",
			"(c)2016-2022 Medable, Inc.  All Rights Reserved.",
			"Unauthorized use, modification, or reproduction is prohibited.",
			"This is a component of Axon, Medable's SmartStudy(TM) system.",
			"",
			"***********************************************************/",
			"$0"
		],
		"description": "medable script header comment"
	},
	"assert for script runner": {
		"prefix": "md assert",
		"body": [
			"// const should = require('should')",
			"should.equal('a','a')",
			"$0"
		],
		"description": ""
	},
	"trigger events ": {
		"prefix": "md trigger events",
		"body": [
			"${1|'create.after','create.before','update.after','update.before','delete.after','delete.before'|}",
			"$0"
		],
		"description": "trigger events "
	},
	"md query": {
		"prefix": "md query",
		"body": [
			"org.objects",
			".${1|c_public_user,c_anchor_date_template,c_branch,c_event,c_group,c_notif,c_step,c_step_response,c_task,c_task_assigment,c_task_response,c_visit,c_visit_schedule|}",
			".${2|find(),readOne(),insertOne(),insertMany(),updateOne(),delete(),deleteMany()|}",
			".skipAcl()",
			".grant(consts.accessLevels.${3|read,update,delete,public,connected,reserved,share,script|})",
			"$0"
		],
		"description": "query"
	},
	"cortext access levels": {
		"prefix": "md accessLevels",
		"body": [
			"consts.accessLevels.${1|read,update,delete,public,connected,reserved,share,script|}",
			"$0"
		],
		"description": "cortext access levels"
	},
	"logger (medable)": {
		"prefix": "md logger",
		"body": [
			"import logger from 'logger'",
			"logger.${1|info,error,debug,trace|}(${2:object}, '${3:message}')",
			"$0"
		],
		"description": "Write in log file, with level specification"
	},
	"logger levels": {
		"prefix": "md logLevels",
		"body": [
			"${1|info,error,debug,trace,warn|}",
			"$0"
		],
		"description": "cortext logger levels"
	},
	"medable objects": {
		"prefix": "md objects",
		"body": [
			".${1|c_public_user,account,c_task,c_task_response,c_step,c_step_response,c_site,c_site_user,c_event,c_anchor_date_template,c_branch,c_group,c_notif,c_axon_notif,c_task_assignment,c_visit,c_visit_schedule|}",
			"$0"
		],
		"description": "medable objects"
	},
	"task trigger": {
		"prefix": "md trigger task",
		"body": [
			"const { log, trigger } = require('decorators')",
			"const config = require('config')",
			"const r = consts.accessLevels.read,",
			"      u = consts.accessLevels.update",
			"",
			"class ${1:triggerClass} {",
			"    @log({ traceError: true })",
			"    @trigger(${2|'create.after','create.before','update.after','update.before','delete.after','delete.before'|}, {",
			"      object: 'c_task',",
			"      weight: 1,",
			"      principal: 'c_system_user',",
			"      if: {",
			"        $and: [",
			"          {",
			"            $gte: [{",
			"              $indexOfArray: [",
			"                '$$SCRIPT.arguments.modified',",
			"                'c_completed'",
			"              ]",
			"            }, 0]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_success', true]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_completed', true]",
			"          },",
			"          {",
			"            $eq: [{",
			"              $pathTo: [{",
			"                $dbNext: {",
			"                  $object: {",
			"                    object: 'c_task',",
			"                    operation: 'cursor',",
			"                    where: {",
			"                      c_key: { $config: 'c_cs.${3:taskKey}' }",
			"                    }",
			"                  }",
			"                }",
			"              }, '_id']",
			"            },",
			"            '$$ROOT.c_task._id'",
			"            ]",
			"          }",
			"        ]",
			"      }",
			"    })",
			"  static ${4:functionName}() {",
			"    const { c_task._id: taskId } = script.arguments.old,",
			"      task = org.objects.c_task.readOne({ _id: taskId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute()",
			"  }",
			"}"
		],
		"description": "Template for task trigger"
	},
	"trigger on task response": {
		"prefix": "md trigger task response",
		"body": [
			"const { log, trigger } = require('decorators')",
			"const config = require('config')",
			"const r = consts.accessLevels.read,",
			"      u = consts.accessLevels.update",
			"",
			"class ${1:triggerClass} {",
			"  @log({ traceError: true })",
			"    @trigger(${2|'create.after','create.before','update.after','update.before','delete.after','delete.before'|}, {",
			"      object: 'c_task_response',",
			"      weight: 1,",
			"      principal: 'c_system_user',",
			"      if: {",
			"        $and: [",
			"          {",
			"            $gte: [{",
			"              $indexOfArray: [",
			"                '$$SCRIPT.arguments.modified',",
			"                'c_completed'",
			"              ]",
			"            }, 0]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_success', true]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_completed', true]",
			"          },",
			"          {",
			"            $or: [",
			"              {",
			"                $eq: [{",
			"                  $pathTo: [{",
			"                    $dbNext: {",
			"                      $object: {",
			"                        object: 'c_task',",
			"                        operation: 'cursor',",
			"                        where: {",
			"                          c_key: '${3:Enter task c_key here}'",
			"                        }",
			"                      }",
			"                    }",
			"                  }, '_id']",
			"                },",
			"                '$$ROOT.c_task._id'",
			"                ]",
			"              }",
			"            ]",
			"          }",
			"        ]",
			"      }",
			"    })",
			"  static ${4:functionName}() {",
			"    const { debug } = require('logger')",
			"    const { c_task_response._id: taskResponseId } = script.arguments.new,",
			"      taskResponse = org.objects.c_task_response.readOne({ _id: taskResponseId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute()",
			"//    debug('taskResponse ->', taskResponse)",
			"  }",
			"}",
			"$0"
		],
		"description": "Create trigger on task response"
	},
	"event trigger single task": {
		"prefix": "md trigger event single",
		"body": [
			"const { log, trigger } = require('decorators')",
			"const config = require('config')",
			"const r = consts.accessLevels.read,",
			"      u = consts.accessLevels.update",
			"",
			"class ${1:triggerClass} {",
			"    @log({ traceError: true })",
			"    @trigger(${2|'create.after','create.before','update.after','update.before','delete.after','delete.before'|}, {",
			"      object: 'c_event',",
			"      weight: 1,",
			"      principal: 'c_system_user',",
			"      if: {",
			"        $and: [",
			"          {",
			"            $gte: [{",
			"              $indexOfArray: [",
			"                '$$SCRIPT.arguments.modified',",
			"                'c_completed'",
			"              ]",
			"            }, 0]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_success', true]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_completed', true]",
			"          },",
			"          {",
			"            $eq: [{",
			"              $pathTo: [{",
			"                $dbNext: {",
			"                  $object: {",
			"                    object: 'c_event',",
			"                    operation: 'cursor',",
			"                    where: {",
			"                      c_key: { $config: 'c_cs.${3:taskKey}' }",
			"                    }",
			"                  }",
			"                }",
			"              }, '_id']",
			"            },",
			"            '$$ROOT.c_event._id'",
			"            ]",
			"          }",
			"        ]",
			"      }",
			"    })",
			"  static ${4:functionName}() {",
			"    const { c_task._id: taskId } = script.arguments.old,",
			"      task = org.objects.c_task.readOne({ _id: taskId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute()",
			"  }",
			"}"
		],
		"description": ""
	},
	"event trigger multiple tasks": {
		"prefix": "md trigger event multiple",
		"body": [
			"const { log, trigger } = require('decorators')",
			"const config = require('config')",
			"const r = consts.accessLevels.read,",
			"      u = consts.accessLevels.update",
			"",
			"class ${1:triggerClass} {",
			"   @log({ traceError: true })",
			"   @trigger(${2|'create.after','create.before','update.after','update.before','delete.after','delete.before'|}, {",
			"    object: \"c_event\",",
			"    weight: 1,",
			"    principal: \"c_system_user\",",
			"    if: {",
			"      $and: [",
			"        {",
			"          $ne: [",
			"            {",
			"              $indexOfArray: [\"$$SCRIPT.arguments.modified\", \"c_missed\"]",
			"            },",
			"            -1",
			"          ]",
			"        },",
			"        {",
			"          $eq: [\"$$ROOT.c_missed\", true]",
			"        },",
			"        {",
			"          $in: [",
			"            \"$$ROOT.c_task._id\",",
			"            {",
			"              $pathTo: [",
			"                {",
			"                  $dbNext: {",
			"                    $object: {",
			"                      skipAcl: true,",
			"                      grant: \"read\",",
			"                      object: \"c_task\",",
			"                      operation: \"cursor\",",
			"                      pipeline: {",
			"                        $array: [",
			"                          {",
			"                            $object: {",
			"                              $match: {",
			"                                c_key: {",
			"                                  $object: {",
			"                                    $in: {",
			"                                      $config:",
			"                                        \"c_cs.${3:taskKeysArray}\",",
			"                                    },",
			"                                  },",
			"                                },",
			"                              },",
			"                            },",
			"                          },",
			"                          {",
			"                            $literal: {",
			"                              $group: {",
			"                                _id: { $literal: \"\" },",
			"                                ids: { $push: \"_id\" },",
			"                              },",
			"                            },",
			"                          },",
			"                        ],",
			"                      },",
			"                    },",
			"                  },",
			"                },",
			"                \"ids\",",
			"              ],",
			"            },",
			"          ],",
			"        }",
			"      ]",
			"    }",
			"  })",
			"  static ${4:functionName}() {",
			"    const { c_public_user._id: publicUserId, c_task_id: taskId  } = script.arguments.old,",
			"      publicUser = org.objects.c_public_user.readOne({ _id: publicUserId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute(),",
			"      task = org.objects.c_task.readOne({ _id: taskId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute(),",
			"  }",
			"}"
		],
		"description": ""
	},
	"medable config": {
		"prefix": "md config",
		"body": [
			"// import config from 'config'",
			"config.${1|keys(),get(key),set(key \\, value)|}",
			"$0"
		],
		"description": "medable config"
	},
	"debug": {
		"prefix": "md debug",
		"body": [
			"import { debug } from 'logger'",
			"debug(${1:object}, ${2:'message'})",
			"$0"
		],
		"description": "Write in log file - debug level"
	},
	"moment": {
		"prefix": "md moment",
		"body": [
			"import moment from 'moment.timezone'",
			"$0"
		],
		"description": "import moment package"
	},
	"find": {
		"prefix": "md find",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,c_step,c_step_response,c_missed_task,c_patient_flag,c_anchor_date_templates,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit,c_notif,c_axon_notif,Event|}.find({_id: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - find operation"
	},
	"insert": {
		"prefix": "md insert",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,c_step,c_step_response,c_missed_task,c_patient_flag,c_anchor_date_templates,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit,c_notif,c_axon_notif,Event|}.insertOne()",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.update)",
			"  .lean(false)",
			"  .execute()",
			"$0"
		],
		"description": "cortex - insert operation"
	},
	"update": {
		"prefix": "md update",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,Event,c_step,c_step_response,c_missed_task,c_patient_flag,c_anchor_date_templates,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit|}.updateOne({ _id: '$2' }, { $$set: {${3:key}: '${4:value}'  } })",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.update)",
			"  .lean(false)",
			"  .execute()",
			"$0"
		],
		"description": "cortex - update operation"
	},
	"read One": {
		"prefix": "md readOne",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,Event,c_step,c_step_response,c_missed_task,c_patient_flag,c_anchor_date_templates,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit|}.readOne({_id: '$2'})",
			"  .throwNotFound(false)",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"  .execute()",
			"$0"
		],
		"description": "cortex - readOne operation"
	},
	"delete": {
		"prefix": "md delete",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,Event,c_step,c_step_response,c_missed_task,c_patient_flag,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit|}.deleteOne({_id: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.delete)",
			"  .execute()",
			"$0"
		],
		"description": "cortex - delete operation"
	},
	"create event": {
		"prefix": "md event create",
		"body": [
		  "import moment from 'moment.timezone'",
		  "",
		  "const account = script.principal",
		  "const daysFromNow = ${1:0}",
		  "const hour = ${2:0}",
		  "const minute = ${3:0}",
		  "",
		  "const eventTime = moment()",
		  "// .tz(account.tz)",
		  "  .add(daysFromNow, 'days')",
		  "  .startOf('day')",
		  "  .add(hour, 'hours')",
		  "  .add(minute, 'minutes')",
		  "  .toDate()",
		  "",
		  "// key and event MUST HAVE double undeline in string literal", 
		  "org.objects.Event.insertOne(",
		  "  {",
		  "    type: 'script',",
		  "    key: `cs__${4:key}.${account._id}.${(new Date())",
		  "      .toISOString()}`,",
		  "    event: 'cs__${5:event_name}',",
		  "    param: {",
		  "      account: account",
		  "    },",
		  "    start: eventTime",
		  "  }",
		  ")",
		  "  .grant(consts.accessLevels.script)",
		  "  .bypassCreateAcl()",
		  "  .execute()"
		],
		"description": "create event"
	  },
	"ats notif payload": {
		"prefix": "md payload ats",
		"body": [
			"const payload = {",
			"  c_notifications: [",
			"    {",
			"      c_notification_name: '',",
			"      c_offset: 0,",
			"      c_reference_time: 'start',",
			"      c_conditions: 'c_ats_notif'",
			"    }",
			"  ]",
			"}"
		],
		"description": "Payload template for ATS notification"
	},
	"script.as": {
		"prefix": "md script.as",
		"body": [
			"script.as(",
			"  'c_system_user',",
			"  { safe: false, principal: { skipAcl: true, grant: ${1|'read','update'|} } },",
			"  () => {",
			"    doSomething()",
			"  })"
		],
		"description": "script.as template"
	},
	"arrow function": {
		"prefix": "md arrowFunction",
		"body": [
			"const functionName = (param1, param2) => {",
			"  return ",
			"}"
		],
		"description": "arrow function template"
	},
	"class with static method": {
		"prefix": "md class",
		"body": [
			"class ${1:className} {",
			"",
			"  static ${2:functionName} () {",
			"    return 'Hello'",
			"  }",
			"",
			"}"
		],
		"description": "class template"
	},
	"ternary condition": {
		"prefix": "md ternary",
		"body": [
			"${1:condition} ? ${2:value_if_true} : ${3:value_if_false}"
		],
		"description": "ternary condition"
	},
	"get account": {
		"prefix": "md get account",
		"body": [
			"org.objects.account.find({_id: '$1', email: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "get cortex account"
	},
	"get c_event": {
		"prefix": "md get event",
		"body": [
			"org.objects.c_event.find({c_public_user: '$1', c_task: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "get cortex c_events"
	},
	"get Event": {
		"prefix": "md get Event",
		"body": [
			"org.objects.Event.find({key: '$1'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "get cortex Event"
	},
	"get patient flag": {
		"prefix": "md get patient flag",
		"body": [
			"org.objects.c_patient_flag.find({_id: '$1', c_identifier: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "get patient flags"
	},
	"get task assignment": {
		"prefix": "md get task assignment",
		"body": [
			"org.objects.c_task_assignments.find({_id: '$1', c_task: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - get task assignment"
	},
	"get site": {
		"prefix": "md get site",
		"body": [
			"org.objects.c_site.find({_id: '$1', c_name: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - get site"
	},
	"get study": {
		"prefix": "md get study",
		"body": [
			"org.objects.c_study.find({_id: '$1', c_name: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - get study"
	},
	"get anchor date template": {
		"prefix": "md get anchor date",
		"body": [
			"org.objects.c_anchor_date_templates.find({_id: '$1', c_identifier: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - get anchor date"
	},
	"c_notif - schedule notification": {
		"prefix": "md notif schedule",
		"body": [
			"const notif = require('cs__notif')",
			"const notifData = {",
			"  c_public_user: '${1:USER_ID}',",
			"  c_name:  '${2:NOTIF_NAME}',",
			"  c_recipient:  '${3:ACCOUNT_ID}',",
			"  c_recurring: ${4|true,false|}, // if not reccuring --> false",
			"  c_date:  '${5:DATETIME}'// notif date, if reccuring -> then first notif date",
			"  //c_recurrence: {",
			"  //  c_interval: 6,",
			"  //  c_unit: 'weeks'",
			"  //} // if reccuring, how often will notif repeat",
			"}",
			"notif.scheduleNotif(notifData)",
			"$0"
		],
		"description": "Schedule notif with cs_notifications module"
	},
	"c_notif - cancel notification": {
		"prefix": "md notif cancel",
		"body": [
			"const notif = require('cs_notifications')",
			"const notifs = org.objects.c_notif",
			"  .find({",
			"    c_name: '${1:NOTIFICATION_NAME}',",
			"    c_recipient: '${2:ACCOUNT_ID}',",
			"    c_status: 'scheduled'",
			"  })",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"  .toArray()",
			"if (!notifs.length) {",
			"  return",
			"}",
			"const notifIds = notifs.map(n => n._id)",
			"",
			"notif.cancelNotif(notifIds)",
			"$0"
		],
		"description": "Cancel scheduled c_notifs"
	},
	"find c_public_users": {
		"prefix": "md get publicuser",
		"body": [
			"org.objects.c_public_user.${1|find,readOne|}({ ${2|_id,c_email,c_number,c_tz|}: '${3}' })",
			"    .skipAcl()",
			"    .grant(consts.accessLevels.read)",
			"    .next()",
			"  $0"
		],
		"description": "Find/ReadOne study participant"
	},
	"update c_public_user": {
		"prefix": "md update publicuser",
		"body": [
			"org.objects.c_public_user.updateOne({ ${1|_id,c_email,c_number,c_account._id|}: '${2}' }, { $$set: { ${3:key}: ${4:new value} } })",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.update)",
			"  .execute()",
			"$0"
		],
		"description": "Updates c_public_user"
	},
	"Medable - find c_task": {
		"prefix": "md get task",
		"body": [
			"org.objects.c_task.find({ _id: '$1', c_name: '$2', c_key: '$3' })",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"  .next()",
			"  $0"
		],
		"description": "Find c_task"
	},
	"Medable - find task response": {
		"prefix": "md get task response",
		"body": [
			"org.objects.c_task_response.find({",
			"  _id: '$1',",
			"  c_task: '$2',",
			"  c_public_user: '$3',",
			"  c_end_date: '$4'",
			"})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"  .next()",
			"  $0"
		],
		"description": "Find task response"
	},
	"Medable - find step": {
		"prefix": "md get step",
		"body": [
			"org.objects.c_step.find({ _id: '$1', c_task: '$2', c_key: '$4' })",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"  .next()",
			"  $0"
		],
		"description": "Find step"
	},
	"Medable - find step response": {
		"prefix": "md get step response",
		"body": [
			"org.objects.c_step_response.find({ _id: '$1', c_task: '$2', c_step: '$3' })",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"  .next()",
			"  $0"
		],
		"description": "Find step response"
	},
	"Medable - update task response": {
		"prefix": "md update task response",
		"body": [
			"org.objects.c_task_response.updateOne({",
			"  _id: '$1'",
			"}, { $$set: { ${2:c_completed}: '${3|true,false|}'  }})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.update)",
			"  .execute()",
			"  $0"
		],
		"description": "Update task response object"
	},
	"import underscore": {
		"prefix": "md underscore",
		"body": [
			"import _ from 'underscore'"
		],
		"description": "import underscore"
	},
	"Medable - create route": {
		"prefix": "md route create",
		"body": [
			"const { route, log } = require('decorators')",
			"",
			"class MyRoute {",
			"  @log({ traceError: true })",
			"  @route({",
			"    weight: 1,",
			"    method: ${1|'GET','POST','PUT','PATCH','DELETE'|},",
			"    name: '${2:name}',",
			"    path: '${3:path}',",
			"    apiKey: '${4:c_portal}'",
			"  })",
			"  ${5:routeHandler}({ req, res, body, next, runtime }) {",
			"    // const requestBody = body()",
			"\t\t$0",
			"  }",
			"",
			"}"
		],
		"description": "Create route in library script"
	},
	"import faults": {
		"prefix": "md faults",
		"body": [
			"import faults from 'c_fault_lib'",
			"",
			"faults.throw('$1')",
			"$0",

		],
		"description": "import faults and throw one"
	},
	"find event": {
		"prefix": "md event find",
		"body": [
		  "// find by _id or key, if event is not expired",
		  "const result = org.objects.Event.find({ _id: '${1:628641ae1eb2eb53b15348c5}' })",
		  "  .skipAcl()",
		  "  .grant(consts.accessLevels.read)",
		  "$0"
		],
		"description": "find event"
	  },
	  "paths util": {
		"prefix": "md util paths",
		"body": [
		  "// import { paths } from 'util'",
		  "/**",
		  " object (Object) The object to search or update.",
		  " path (String) The path to search or update. Sub-properties can be found/updated using a . as a separator.",
		  " value (*) If present, writes to the innermost path. If any of the properties are missing from the path, they are created as plain javascript objects.",
		  " returnSourceObject (Boolean) If true, returns object instead of the innermost property.",
		  " */",
		  "paths.to(${1:object}, ${2:path}, ${3:value}, ${4:returnSourceObject}) ",
		  "$0"
		],
		"description": "paths util"
	  },
	"session object": {
		"prefix": "md session",
		"body": [
		  "// import session from 'session';",
		  "session.${1|get(path),set(path, value)|}",
		  "$0"
		],
		"description": "session object"
	  },
	  "cache ": {
		"prefix": "md cache",
		"body": [
		  "import cache from 'cache'",
		  "cache.${1|get(key),set(key\\,value\\,ttl = null),del(key),has(key),cas(key\\,chk\\,val\\,ttl = null),clear(search=*),count(search=*),find(search\\,skip=0\\,limit=100),list(search=*\\,skip=0\\,limit=100)|}"
		],
		"description": "cache "
	  },
}