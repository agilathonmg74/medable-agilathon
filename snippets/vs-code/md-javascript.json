{
	"md query": {
		"prefix": "md query",
		"body": [
			"org.objects",
			".${1|c_public_user,c_anchor_date_template,c_branch,c_event,c_group,c_notif,c_step,c_step_response,c_task,c_task_assigment,c_task_response,c_visit,c_visit_schedule|}",
			".${2|find(),readOne(),insertOne(),insertMany(),updateOne(),delete(),deleteMany()|}",
			".skipAcl()",
			".grant(consts.accessLevels.${3|read,update,delete,public,connected,reserved,share,script|})",
			"$0"
		],
		"description": "query"
	},
	"cortext access levels": {
		"prefix": "md accessLevels",
		"body": [
			"consts.accessLevels.${1|read,update,delete,public,connected,reserved,share,script|}",
			"$0"
		],
		"description": "cortext access levels"
	},
	"medable objects": {
		"prefix": "md objects",
		"body": [
			".${1|c_public_user,account,c_task,c_task_response,c_step,c_step_response,c_site,c_site_user,c_event,c_anchor_date_template,c_branch,c_group,c_notif,c_axon_notif,c_task_assignment,c_visit,c_visit_schedule|}",
			"$0"
		],
		"description": "medable objects"
	},
	"task trigger": {
		"prefix": "md trigger task",
		"body": [
			"const { log, trigger } = require('decorators')",
			"const config = require('config')",
			"const r = consts.accessLevels.read,",
			"      u = consts.accessLevels.update",
			"",
			"class ${1:triggerClass} {",
			"    @log({ traceError: true })",
			"    @trigger(${2|'create.after','create.before','update.after','update.before','delete.after','delete.before'|}, {",
			"      object: 'c_task',",
			"      weight: 1,",
			"      principal: 'c_system_user',",
			"      if: {",
			"        $and: [",
			"          {",
			"            $gte: [{",
			"              $indexOfArray: [",
			"                '$$SCRIPT.arguments.modified',",
			"                'c_completed'",
			"              ]",
			"            }, 0]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_success', true]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_completed', true]",
			"          },",
			"          {",
			"            $eq: [{",
			"              $pathTo: [{",
			"                $dbNext: {",
			"                  $object: {",
			"                    object: 'c_task',",
			"                    operation: 'cursor',",
			"                    where: {",
			"                      c_key: { $config: 'c_cs.${3:taskKey}' }",
			"                    }",
			"                  }",
			"                }",
			"              }, '_id']",
			"            },",
			"            '$$ROOT.c_task._id'",
			"            ]",
			"          }",
			"        ]",
			"      }",
			"    })",
			"  static ${4:functionName}() {",
			"    const { c_task._id: taskId } = script.arguments.old,",
			"      task = org.objects.c_task.readOne({ _id: taskId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute()",
			"  }",
			"}"
		],
		"description": "Template for task trigger"
	},
	"trigger on task response": {
		"prefix": "md trigger task response",
		"body": [
			"const { log, trigger } = require('decorators')",
			"const config = require('config')",
			"const r = consts.accessLevels.read,",
			"      u = consts.accessLevels.update",
			"",
			"class ${1:triggerClass} {",
			"  @log({ traceError: true })",
			"    @trigger(${2|'create.after','create.before','update.after','update.before','delete.after','delete.before'|}, {",
			"      object: 'c_task_response',",
			"      weight: 1,",
			"      principal: 'c_system_user',",
			"      if: {",
			"        $and: [",
			"          {",
			"            $gte: [{",
			"              $indexOfArray: [",
			"                '$$SCRIPT.arguments.modified',",
			"                'c_completed'",
			"              ]",
			"            }, 0]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_success', true]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_completed', true]",
			"          },",
			"          {",
			"            $or: [",
			"              {",
			"                $eq: [{",
			"                  $pathTo: [{",
			"                    $dbNext: {",
			"                      $object: {",
			"                        object: 'c_task',",
			"                        operation: 'cursor',",
			"                        where: {",
			"                          c_key: '${3:Enter task c_key here}'",
			"                        }",
			"                      }",
			"                    }",
			"                  }, '_id']",
			"                },",
			"                '$$ROOT.c_task._id'",
			"                ]",
			"              }",
			"            ]",
			"          }",
			"        ]",
			"      }",
			"    })",
			"  static ${4:functionName}() {",
			"    const { debug } = require('logger')",
			"    const { c_task_response._id: taskResponseId } = script.arguments.new,",
			"      taskResponse = org.objects.c_task_response.readOne({ _id: taskResponseId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute()",
			"//    debug('taskResponse ->', taskResponse)",
			"  }",
			"}",
			"$0"
		],
		"description": "Create trigger on task response"
	},
	"event trigger single task": {
		"prefix": "md trigger event single",
		"body": [
			"const { log, trigger } = require('decorators')",
			"const config = require('config')",
			"const r = consts.accessLevels.read,",
			"      u = consts.accessLevels.update",
			"",
			"class ${1:triggerClass} {",
			"    @log({ traceError: true })",
			"    @trigger(${2|'create.after','create.before','update.after','update.before','delete.after','delete.before'|}, {",
			"      object: 'c_event',",
			"      weight: 1,",
			"      principal: 'c_system_user',",
			"      if: {",
			"        $and: [",
			"          {",
			"            $gte: [{",
			"              $indexOfArray: [",
			"                '$$SCRIPT.arguments.modified',",
			"                'c_completed'",
			"              ]",
			"            }, 0]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_success', true]",
			"          },",
			"          {",
			"            $eq: ['$$ROOT.c_completed', true]",
			"          },",
			"          {",
			"            $eq: [{",
			"              $pathTo: [{",
			"                $dbNext: {",
			"                  $object: {",
			"                    object: 'c_event',",
			"                    operation: 'cursor',",
			"                    where: {",
			"                      c_key: { $config: 'c_cs.${3:taskKey}' }",
			"                    }",
			"                  }",
			"                }",
			"              }, '_id']",
			"            },",
			"            '$$ROOT.c_event._id'",
			"            ]",
			"          }",
			"        ]",
			"      }",
			"    })",
			"  static ${4:functionName}() {",
			"    const { c_task._id: taskId } = script.arguments.old,",
			"      task = org.objects.c_task.readOne({ _id: taskId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute()",
			"  }",
			"}"
		],
		"description": ""
	},
	"event trigger multiple tasks": {
		"prefix": "md trigger event multiple",
		"body": [
			"const { log, trigger } = require('decorators')",
			"const config = require('config')",
			"const r = consts.accessLevels.read,",
			"      u = consts.accessLevels.update",
			"",
			"class ${1:triggerClass} {",
			"   @log({ traceError: true })",
			"   @trigger(${2|'create.after','create.before','update.after','update.before','delete.after','delete.before'|}, {",
			"    object: \"c_event\",",
			"    weight: 1,",
			"    principal: \"c_system_user\",",
			"    if: {",
			"      $and: [",
			"        {",
			"          $ne: [",
			"            {",
			"              $indexOfArray: [\"$$SCRIPT.arguments.modified\", \"c_missed\"]",
			"            },",
			"            -1",
			"          ]",
			"        },",
			"        {",
			"          $eq: [\"$$ROOT.c_missed\", true]",
			"        },",
			"        {",
			"          $in: [",
			"            \"$$ROOT.c_task._id\",",
			"            {",
			"              $pathTo: [",
			"                {",
			"                  $dbNext: {",
			"                    $object: {",
			"                      skipAcl: true,",
			"                      grant: \"read\",",
			"                      object: \"c_task\",",
			"                      operation: \"cursor\",",
			"                      pipeline: {",
			"                        $array: [",
			"                          {",
			"                            $object: {",
			"                              $match: {",
			"                                c_key: {",
			"                                  $object: {",
			"                                    $in: {",
			"                                      $config:",
			"                                        \"c_cs.${3:taskKeysArray}\",",
			"                                    },",
			"                                  },",
			"                                },",
			"                              },",
			"                            },",
			"                          },",
			"                          {",
			"                            $literal: {",
			"                              $group: {",
			"                                _id: { $literal: \"\" },",
			"                                ids: { $push: \"_id\" },",
			"                              },",
			"                            },",
			"                          },",
			"                        ],",
			"                      },",
			"                    },",
			"                  },",
			"                },",
			"                \"ids\",",
			"              ],",
			"            },",
			"          ],",
			"        }",
			"      ]",
			"    }",
			"  })",
			"  static ${4:functionName}() {",
			"    const { c_public_user._id: publicUserId, c_task_id: taskId  } = script.arguments.old,",
			"      publicUser = org.objects.c_public_user.readOne({ _id: publicUserId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute(),",
			"      task = org.objects.c_task.readOne({ _id: taskId })",
			"        .throwNotFound(false)",
			"        .skipAcl()",
			"        .grant(r)",
			"        .execute(),",
			"  }",
			"}"
		],
		"description": ""
	},
	"config": {
		"prefix": "md config",
		"body": [
			"import config from 'config'",
			"$0"
		],
		"description": "medable config"
	},
	"debug": {
		"prefix": "md debug",
		"body": [
			"import { debug } from 'logger'",
			"debug(${1:object}, ${2:'message'})",
			"$0"
		],
		"description": "Write in log file - debug level"
	},
	"moment": {
		"prefix": "md moment",
		"body": [
			"import { moment } from 'moment.timezone'",
			"$0"
		],
		"description": "import moment package"
	},
	"find": {
		"prefix": "md find",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,c_step,c_step_response,c_missed_task,c_patient_flag,c_anchor_date_templates,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit,c_notif,c_axon_notif,Event|}.find({_id: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - find operation"
	},
	"insert": {
		"prefix": "md insert",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,c_step,c_step_response,c_missed_task,c_patient_flag,c_anchor_date_templates,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit,c_notif,c_axon_notif,Event|}.insertOne()",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.update)",
			"  .lean(false)",
			"  .execute()",
			"$0"
		],
		"description": "cortex - insert operation"
	},
	"update": {
		"prefix": "md update",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,Event,c_step,c_step_response,c_missed_task,c_patient_flag,c_anchor_date_templates,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit|}.updateOne({ _id: '$2' }, { $set: {${3:key}: '${4:value}'  } })",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.update)",
			"  .lean(false)",
			"  .execute()",
			"$0"
		],
		"description": "cortex - update operation"
	},
	"read One": {
		"prefix": "md readOne",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,Event,c_step,c_step_response,c_missed_task,c_patient_flag,c_anchor_date_templates,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit|}.readOne({_id: '$2'})",
			"  .throwNotFound(false)",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"  .execute()",
			"$0"
		],
		"description": "cortex - readOne operation"
	},
	"delete": {
		"prefix": "md delete",
		"body": [
			"org.objects.${1|c_public_user,c_task,c_task_response,account,c_event,Event,c_step,c_step_response,c_missed_task,c_patient_flag,c_sent,c_site,c_site_user,c_study,c_task_assignment,c_visit|}.deleteOne({_id: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.delete)",
			"$0"
		],
		"description": "cortex - delete operation"
	},
	"create event": {
		"prefix": "md event create",
		"body": [
			"org.objects.Event.insertOne({",
			"  type: 'script',",
			"  event: ${1:'eventName'},",
			"  key: ${2:`unique.key`},",
			"  param: eventParamsObject,//add param obj to pass to event here",
			"  start: startDate",
			"})",
			"  .bypassCreateAcl()",
			"  .grant(consts.accessLevels.update)",
			"  .execute()",
			"$0"
		],
		"description": "create Event"
	},
	"ats notif payload": {
		"prefix": "md payload ats",
		"body": [
			"const payload = {",
			"  c_notifications: [",
			"    {",
			"      c_notification_name: '',",
			"      c_offset: 0,",
			"      c_reference_time: 'start',",
			"      c_conditions: 'c_ats_notif'",
			"    }",
			"  ]",
			"}"
		],
		"description": "Payload template for ATS notification"
	},
	"script.as": {
		"prefix": "md script.as",
		"body": [
			"script.as(",
			"  'c_system_user',",
			"  { safe: false, principal: { skipAcl: true, grant: ${1|'read','update'|} } },",
			"  () => {",
			"    doSomething()",
			"  })"
		],
		"description": "script.as template"
	},
	"arrow function": {
		"prefix": "md arrowFunction",
		"body": [
			"const functionName = (param1, param2) => {",
			"  return ",
			"}"
		],
		"description": "arrow function template"
	},
	"class with static method": {
		"prefix": "md class",
		"body": [
			"class ${1:className} {",
			"",
			"  static ${2:functionName} () {",
			"    return 'Hello'",
			"  }",
			"",
			"}"
		],
		"description": "class template"
	},
	"ternary condition": {
		"prefix": "md ternary",
		"body": [
			"${1:condition} ? ${2:value_if_true} : ${3:value_if_false}"
		],
		"description": "ternary condition"
	},
	"get account": {
		"prefix": "md get account",
		"body": [
			"org.objects.account.find({_id: '$1', email: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "get cortex account"
	},
	"get c_event": {
		"prefix": "md get event",
		"body": [
			"org.objects.c_event.find({c_public_user: '$1', c_task: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "get cortex c_events"
	},
	"get Event": {
		"prefix": "md get Event",
		"body": [
			"org.objects.Event.find({key: '$1'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "get cortex Event"
	},
	"get patient flag": {
		"prefix": "md get patient flag",
		"body": [
			"org.objects.c_patient_flag.find({_id: '$1', c_identifier: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "get patient flags"
	},
	"get task assignment": {
		"prefix": "md get task assignment",
		"body": [
			"org.objects.c_task_assignments.find({_id: '$1', c_task: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - get task assignment"
	},
	"get site": {
		"prefix": "md get site",
		"body": [
			"org.objects.c_site.find({_id: '$1', c_name: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - get site"
	},
	"get study": {
		"prefix": "md get study",
		"body": [
			"org.objects.c_study.find({_id: '$1', c_name: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - get study"
	},
	"get anchor date template": {
		"prefix": "md get anchor date",
		"body": [
			"org.objects.c_anchor_date_templates.find({_id: '$1', c_identifier: '$2'})",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"$0"
		],
		"description": "cortex - get anchor date"
	},
	"c_notif - schedule notification": {
		"prefix": "md notif schedule",
		"body": [
			"const notif = require('cs__notif')",
			"const notifData = {",
			"  c_public_user: '${1:USER_ID}',",
			"  c_name:  '${2:NOTIF_NAME}',",
			"  c_recipient:  '${3:ACCOUNT_ID}',",
			"  c_recurring: ${4|true,false|}, // if not reccuring --> false",
			"  c_date:  '${5:DATETIME}'// notif date, if reccuring -> then first notif date",
			"  //c_recurrence: {",
			"  //  c_interval: 6,",
			"  //  c_unit: 'weeks'",
			"  //} // if reccuring, how often will notif repeat",
			"}",
			"notif.scheduleNotif(notifData)",
			"$0"
		],
		"description": "Schedule notif with cs_notifications module"
	},
	
	"c_notif - cancel notification": {
		"prefix": "md notif cancel",
		"body": [
			"const notif = require('cs_notifications')",
			"const notifs = org.objects.c_notif",
			"  .find({",
			"    c_name: '${1:NOTIFICATION_NAME}',",
			"    c_recipient: '${2:ACCOUNT_ID}',",
			"    c_status: 'scheduled'",
			"  })",
			"  .skipAcl()",
			"  .grant(consts.accessLevels.read)",
			"  .toArray()",
			"if (!notifs.length) {",
			"  return",
			"}",
			"const notifIds = notifs.map(n => n._id)",
			"",
			"notif.cancelNotif(notifIds)",
			"$0"
		],
		"description": "Cancel scheduled c_notifs"
	},
	"find c_public_users": {
		"prefix": "md get publicuser",
		"body": [
			"org.objects.c_public_user.${1|find,readOne|}({ ${2|_id,c_email,c_number,c_tz|}: '${3}' })",
			"    .skipAcl()",
			"    .grant(consts.accessLevels.read)",
			"    .next()",
			"  $0"
		],
		"description": "Find/ReadOne study participant"
	},
	
	"update c_public_user": {
		"prefix": "md update publicuser",
		"body": [
		  "org.objects.c_public_user.updateOne({ ${1|_id,c_email,c_number,c_account._id|}: '${2}' }, { $$set: { ${3:key}: ${4:new value} } })",
		  "  .skipAcl()",
		  "  .grant(consts.accessLevels.update)",
		  "  .execute()",
		  "$0"
		],
		"description": "Updates c_public_user"
	},
	"Medable - find c_task": {
		"prefix": "md get task",
		"body": [
		  "org.objects.c_task.find({ _id: '$1', c_name: '$2', c_key: '$3' })",
		  "  .skipAcl()",
		  "  .grant(consts.accessLevels.read)",
		  "  .next()",
		  "  $0"
		],
		"description": "Find c_task"
	},
	"Medable - find task response": {
		"prefix": "md get task response",
		"body": [
		  "org.objects.c_task_response.find({",
		  "  _id: '$1',",
		  "  c_task: '$2',",
		  "  c_public_user: '$3',",
		  "  c_end_date: '$4'",
		  "})",
		  "  .skipAcl()",
		  "  .grant(consts.accessLevels.read)",
		  "  .next()",
		  "  $0"
		],
		"description": "Find task response"
	},
	"Medable - find step": {
		"prefix": "md get step",
		"body": [
		  "org.objects.c_step.find({ _id: '$1', c_task: '$2', c_key: '$4' })",
		  "  .skipAcl()",
		  "  .grant(consts.accessLevels.read)",
		  "  .next()",
		  "  $0"
		],
		"description": "Find step"
	},
	"Medable - find step response": {
		"prefix": "md get step response",
		"body": [
		  "org.objects.c_step_response.find({ _id: '$1', c_task: '$2', c_step: '$3' })",
		  "  .skipAcl()",
		  "  .grant(consts.accessLevels.read)",
		  "  .next()",
		  "  $0"
		],
		"description": "Find step response"
	},
	
	"Medable - update task response": {
		"prefix": "md update task response",
		"body": [
		  "org.objects.c_task_response.updateOne({",
		  "  _id: '$1'",
		  "}, { $$set: { ${2:c_completed}: '${3|true,false|}'  }})",
		  "  .skipAcl()",
		  "  .grant(consts.accessLevels.update)",
		  "  .execute()",
		  "  $0"
		],
		"description": "Update task response object"
	  },
	  "import underscore": {
		"prefix": "md underscore",
		"body": [
		  "import _ from 'underscore'"
		],
		"description": "import underscore"
	  },
	  "report helper": {
		"prefix": "md report helper",
		"body": [
		  "import config from 'config'",
		  "const r = consts.accessLevels.read,",
		  "      u = consts.accessLevels.update",
		  "",
		  "function getEntity(currentStage, c_path) {",
		  "  return org.objects[currentStage.c_starting_entity]",
		  "    .aggregate(currentStage.c_aggregation)",
		  "    .prefix(c_path)",
		  "    .skipAcl()",
		  "    .grant(r)",
		  "    .next()",
		  "}",
		  "",
		  "function generateRowsForSubjectCompliance(",
		  "  headers,",
		  "  c_headers_reading,",
		  "  publicUser, // <-- here var is named publicUser, because in script part of ",
		  "  // addTransformationStage in main report file we named it like this:",
		  "  // const publicUser = reportLib.getEntity(currentStage, c_path)",
		  ") {",
		  "  let row1 = {},",
		  "      row2 = {},",
		  "      rows = []",
		  "",
		  "  c_headers_reading.map((headersReading, idx) => {",
		  "    const { paths } = require('util'),",
		  "          [configHeaders] = headersReading,",
		  "          currentHeader = headers[idx],",
		  "          { c_clause, c_special_when } = configHeaders",
		  "    if (c_special_when) {",
		  "      let morningDiaryValue = 'N/A',",
		  "          eveningDiaryValue = 'N/A'",
		  "    //   const userTimezone = publicUser.c_tz || 'Etc/GMT'",
		  "",
		  "      // place here function calls that calculate values needed to be used",
		  "      // more than once in current iteration, example bellow:",
		  "      // const expected1 = getExpectedTasksCount(param1, param2)",
		  "      // const completed1 = getCompletedTasksCount(param1, param2)",
		  "      /***************/",
		  "      switch (String(currentHeader.name)) {",
		  "        case 'c_diary':",
		  "          // morningDiaryValue = 'MORNING DIARY'",
		  "          // eveningDiaryValue = 'EVENING DIARY'",
		  "          break",
		  "        case 'c_compliance_percentage':",
		  "          // morningDiaryValue = getCompliancePercentage(expected1, completed1)",
		  "          // eveningDiaryValue = getCompliancePercentage(expected2, completed2)",
		  "          break",
		  "        case 'some_other_column_label':",
		  "          // morningDiaryValue = (expected1 + completed1) / 2",
		  "          // eveningDiaryValue = (expected1 + completed1) + 2",
		  "          break",
		  "        default:",
		  "          break",
		  "      }",
		  "",
		  "      row1[currentHeader.name] = morningDiaryValue",
		  "      row2[currentHeader.name] = eveningDiaryValue",
		  "    } else {",
		  "      const { c_value } = c_clause",
		  "      row1[currentHeader.name] = paths.to(publicUser, c_value)",
		  "      row2[currentHeader.name] = paths.to(publicUser, c_value)",
		  "    }",
		  "  })",
		  "",
		  "  rows.push(row1, row2)",
		  "  row1 = {}",
		  "  row2 = {}",
		  "",
		  "  return rows",
		  "}",
		  "",
		  "function updateRows(ooTableName, rows) {",
		  "  rows.forEach((row) => {",
		  "    org.objects.OOs.updateOne(",
		  "      {",
		  "        name: ooTableName",
		  "      },",
		  "      {",
		  "        push: row",
		  "      }",
		  "    )",
		  "      .pathPrefix('list')",
		  "      .skipAcl()",
		  "      .grant(u)",
		  "      .execute()",
		  "  })",
		  "}",
		  "",
		  "module.exports = {",
		  "  generateRowsForSubjectCompliance,",
		  "  updateRows,",
		  "  getEntity,",
		  "}",
		  ""
		],
		"description": "Helper script for addTransformationStage of report"
	  },
	  "create example report file": {
		"prefix": "md get report file",
		"body": [
		  "const DataListingReportBuilder = require('c_data_listing_report_builder')",
		  "",
		  "return new DataListingReportBuilder()",
		  "  .setTitle('Report name')",
		  "  .setDescription(",
		  "    'report description'",
		  "  )",
		  "  .addHeaders([",
		  "    {",
		  "      label: 'SITE NUMBER',",
		  "      name: 'c_site_number',",
		  "      type: 'String',",
		  "      //indexed: true,",
		  "      writable: true,",
		  "      c_read_config: [",
		  "        {",
		  "          c_clause: {",
		  "            c_value: 'c_site.c_number'",
		  "          }",
		  "        }",
		  "      ]",
		  "    },",
		  "    {",
		  "      label: 'SUBJECT ID',",
		  "      name: 'c_subject_number',",
		  "      type: 'String',",
		  "      indexed: true,",
		  "      writable: true,",
		  "      c_read_config: [",
		  "        {",
		  "          c_clause: {",
		  "            c_value: 'c_number'",
		  "          }",
		  "        }",
		  "      ]",
		  "    },",
		  "    {",
		  "      label: 'COHORT/DOSING INFORMATION',",
		  "      name: 'c_620_cohort',",
		  "      type: 'String',",
		  "      indexed: true,",
		  "      writable: true,",
		  "      c_read_config: [",
		  "        {",
		  "          c_special_when: true",
		  "        }",
		  "      ]",
		  "    },",
		  "    {",
		  "      label: 'DIARY TYPE',",
		  "      name: 'c_diary',",
		  "      type: 'String',",
		  "      indexed: true,",
		  "      writable: true,",
		  "      c_read_config: [",
		  "        {",
		  "          c_special_when: true",
		  "        }",
		  "      ]",
		  "    },",
		  "    {",
		  "      label: 'EXAMPLE COLUMN LABEL',",
		  "      name: 'c_some_other_column',",
		  "      type: 'String',",
		  "      indexed: true,",
		  "      writable: true,",
		  "      c_read_config: [",
		  "        {",
		  "          c_special_when: true",
		  "        }",
		  "      ]",
		  "    }",
		  "  ])",
		  "  .addDataStages([",
		  "    {",
		  "      pathRead: [",
		  "        {",
		  "          object: 'c_site',",
		  "          c_entity: 'c_sites',",
		  "          c_aggregation: [",
		  "            {",
		  "              $project: {",
		  "                _id: 1,",
		  "                c_subjects: 1,",
		  "                object: 1,",
		  "                c_country: 1,",
		  "                c_pi_name: 1",
		  "              }",
		  "            }",
		  "          ]",
		  "        },",
		  "        {",
		  "          object: 'c_public_user',",
		  "          c_entity: 'c_subjects',",
		  "          c_aggregation: [",
		  "            // {",
		  "            //   $match: {",
		  "            //     c_number: { $exists: true }",
		  "            //   }",
		  "            // },",
		  "            {",
		  "              $project: {",
		  "                _id: 1,",
		  "                object: 1,",
		  "                c_number: 1,",
		  "                c_enrollment_date: 1,",
		  "                c_site: 1,",
		  "                c_tz: 1",
		  "              }",
		  "            }",
		  "          ]",
		  "        }",
		  "      ]",
		  "    }",
		  "  ])",
		  "  .addTransformationStage({",
		  "    object: 'c_public_user',",
		  "    skipAcl: true,",
		  "    grant: 'update',",
		  "    c_entity: 'c_public_user',",
		  "    c_starting_entity: 'c_site',",
		  "    c_aggregation: [",
		  "      {",
		  "        $project: {",
		  "          _id: 1,",
		  "          c_number: 1,",
		  "          c_enrollment_date: 1,",
		  "          c_tz: 1,",
		  "          c_site: {",
		  "            $expand: {",
		  "              c_number: 1,",
		  "              c_country: 1,",
		  "              c_pi_name: 1",
		  "            }",
		  "          }",
		  "        }",
		  "      }",
		  "    ],",
		  "",
		  "    script: `",
		  "    beforeAll(memo) {",
		  "      const config = require('config')",
		  "      memo.logger = require('logger')",
		  "      // example - we can get all object IDs here at the start of report execution",
		  "      // before reports starts iterating through every entity",
		  "      //memo.objectIds = mapObjectsIds()",
		  "    }",
		  "    each(object, { currentStage, ooTableName, headers, c_headers_writing, c_headers_reading, objectIds, logger }) {",
		  "      const reportLib = require('c_cs_report_helpers')",
		  "      const { c_path } = object",
		  "      const publicUser = reportLib.getEntity(currentStage, c_path)",
		  "      const rows = reportLib.generateRowsForSubjectCompliance(headers, c_headers_reading,",
		  "        publicUser, objectIds)",
		  "      reportLib.updateRows(ooTableName, rows)",
		  "    }",
		  "    `",
		  "  })",
		  "  .addReadingStage([",
		  "    {",
		  "      $sort: {",
		  "        c_site_number: 1,",
		  "        c_subject_number: 1",
		  "      }",
		  "    }",
		  "  ])",
		  "  .setRoles({",
		  "    $let: {",
		  "      vars: {",
		  "        // get all roles in the env",
		  "        allRoles: {",
		  "          $pathTo: [",
		  "            {",
		  "              $dbNext: {",
		  "                skipAcl: true,",
		  "                grant: 'read',",
		  "                maxTimeMS: 10000,",
		  "                object: 'org',",
		  "                operation: 'cursor',",
		  "                paths: ['roles']",
		  "              }",
		  "            },",
		  "            'roles'",
		  "          ]",
		  "        },",
		  "",
		  "        // get the site user role id",
		  "        siteUserId: {",
		  "          $pathTo: [{",
		  "            $filter: {",
		  "              input: '$$allRoles',",
		  "              as: 'role',",
		  "              cond: {",
		  "                $eq: ['$$role.code', 'c_site_user']",
		  "              }",
		  "            }",
		  "          }, '0._id']",
		  "        },",
		  "",
		  "        // get the site investigator role id",
		  "        siteInvestigatorId: {",
		  "          $pathTo: [{",
		  "            $filter: {",
		  "              input: '$$allRoles',",
		  "              as: 'role',",
		  "              cond: {",
		  "                $eq: ['$$role.code', 'c_site_investigator']",
		  "              }",
		  "            }",
		  "          }, '0._id']",
		  "        },",
		  "",
		  "        // get the data reviewer role id",
		  "        dataReviewerId: {",
		  "          $pathTo: [{",
		  "            $filter: {",
		  "              input: '$$allRoles',",
		  "              as: 'role',",
		  "              cond: {",
		  "                $eq: ['$$role.code', 'c_data_reviewer']",
		  "              }",
		  "            }",
		  "          }, '0._id']",
		  "        },",
		  "",
		  "        // get the data manager role id",
		  "        dataManagerId: {",
		  "          $pathTo: [{",
		  "            $filter: {",
		  "              input: '$$allRoles',",
		  "              as: 'role',",
		  "              cond: {",
		  "                $eq: ['$$role.code', 'c_data_manager']",
		  "              }",
		  "            }",
		  "          }, '0._id']",
		  "        },",
		  "",
		  "        // get the roles for this user at site level",
		  "        siteLevelRoles: {",
		  "          $ifNull: [",
		  "            {",
		  "              $pathTo: [",
		  "                {",
		  "                  $dbNext: {",
		  "                    maxTimeMS: 10000,",
		  "                    object: 'c_sites',",
		  "                    operation: 'cursor',",
		  "                    paths: {",
		  "                      $array: ['accessRoles']",
		  "                    }",
		  "                  }",
		  "                },",
		  "                'accessRoles'",
		  "              ]",
		  "            },",
		  "            {",
		  "              $array: []",
		  "            }",
		  "          ]",
		  "        },",
		  "",
		  "        // get the roles for this user at account level",
		  "        accountLevelRoles: '$$SCRIPT.principal.roles',",
		  "",
		  "        // merge all roles in a variable",
		  "        accountRoles: {",
		  "          $setUnion: ['$$siteLevelRoles', '$$accountLevelRoles']",
		  "        }",
		  "      },",
		  "      in: {",
		  "        // if the role site user, site investigator, data manager or data reviewer is available return true",
		  "        $or: [",
		  "          {",
		  "            $in: ['$$siteUserId', '$$accountRoles']",
		  "          },",
		  "          {",
		  "            $in: ['$$siteInvestigatorId', '$$accountRoles']",
		  "          },",
		  "          {",
		  "            $in: ['$$dataReviewerId', '$$accountRoles']",
		  "          },",
		  "          {",
		  "            $in: ['$$dataManagerId', '$$accountRoles']",
		  "          }",
		  "        ]",
		  "      }",
		  "    }",
		  "  })",
		  "  .setKey('c9a9a503-3e61-4cce-9074-6cd85d6d75b5')",
		  "  .createReport()"
		],
		"description": "Example report file"
	  }
}